#Input data:
trainingdata <- read.csv("pml-training.csv",na.strings=c("","NA"))
testingdata <- read.csv("pml-testing.csv",na.strings=c("","NA"))
column_train <- colnames(trainingdata)
column_test <- colnames(testingdata)
all.equal(column_train[1:length(column_train)-1], column_test[1:length(column_test)-1])

#Data Preprocessing (Cleaning)

column.na.training <- apply(trainingdata, 2, function(x) any(is.na(x)))
trainingnona <- trainingdata[,!column.na.training]
trainingset <- trainingnona[,8:60]
column.na.test <- apply (testingdata, 2, function(x)  any(is.na(x)))
testingnona <- testingdata[,!column.na.test]
testingset <- testingnona[,8:60]

nsv <- nearZeroVar(trainingset, saveMetrics=TRUE)
nsv

# Data Slicing
inTrain <- createDataPartition(y=trainingset$classe, p=0.75, list=FALSE)
training <- trainingset[inTrain,]
testing <- trainingset[-inTrain,]

# Algorithm:
modFitA1 <- rpart(classe ~ ., data=training, method="class")
fancyRpartPlot(modFitA1)
prediction <- predict(modFitA1, testing, type="class")
confusionMatrix(prediction, testing$classe)

# random Forest algorithm
modFitB1 <- randomForest(classe ~. , data=training)
predictionsB1 <- predict(modFitB1, testing, type = "class")
confusionMatrix(predictionsB1, testing$classe)

# Predict testing dataset
prediction1 <- predict (modFitB1, testingset, type = "class")

